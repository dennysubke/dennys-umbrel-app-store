# Robustere Upstreams (Keepalive, klare Targets)
upstream on_frontend {
  server app:8502;
  keepalive 32;
}
upstream on_api {
  server app:5055;
  keepalive 32;
}

server {
  listen 8502;

  # Timeouts / Retries helfen beim App-Startup
  proxy_connect_timeout 5s;
  proxy_send_timeout    60s;
  proxy_read_timeout    60s;
  proxy_next_upstream   error timeout http_502 http_503 http_504 non_idempotent;

  # Gemeinsame Proxy-Header
  proxy_set_header Host              $host;
  proxy_set_header X-Real-IP         $remote_addr;
  proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
  proxy_set_header X-Forwarded-Proto $scheme;

  # ---- Frontend (Next.js) ----
  location / {
    proxy_pass http://on_frontend;
    proxy_http_version 1.1;
    proxy_set_header Connection "";
  }

  # Statische Next-Assets (optional aber etwas effizienter)
  location /_next/ {
    proxy_pass http://on_frontend;
    proxy_http_version 1.1;
    proxy_set_header Connection "";
  }

  # ---- API als gleicher Origin-Pfad ----
  location /api/ {
    proxy_pass http://on_api/;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
  }

  # WebSocket/RPC (wird vom Backend genutzt)
  location /rpc {
    proxy_pass http://on_api/rpc;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
  }

  # ---- Optional: UI-Config-Endpunkt, damit /_config nicht 404 ist ----
  location = /_config {
    default_type application/json;
    return 200 '{"apiUrl":"/api"}';
  }
}
