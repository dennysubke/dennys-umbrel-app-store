version: "3.7"

services:
  app_proxy:
    environment:
      # Der Web-Container heißt unten "coolify" und lauscht intern auf Port 80
      APP_HOST: dennyy-coolify_web_1
      APP_PORT: 80

  # Docker-in-Docker, damit Coolify NICHT den Host-Docker-Sock braucht
  docker:
    image: docker:28.0.4-dind@sha256:ddb0033088b4fab74881ade341a582e3c6c8021b82377703ba1a6106bd3ded44
    privileged: true
    network_mode: host
    stop_grace_period: 1m
    restart: on-failure
    environment:
      DOCKER_ENSURE_BRIDGE: "dind0:10.32.0.1/16"
    entrypoint: /entrypoint.sh
    command: >
      dockerd
        --bridge dind0
        --data-root /data/data
        --exec-root /data/exec
        --host unix:///data/docker.sock
        --pidfile /data/docker.pid
    volumes:
      - ${APP_DATA_DIR}/entrypoint.sh:/entrypoint.sh
      - ${APP_DATA_DIR}/data/docker:/data

  # Coolify Web
  web:
    image: ghcr.io/coollabsio/coolify:${LATEST_IMAGE:-latest}
    restart: on-failure
    environment:
      # Minimal & notwendig
      APP_ENV: production
      APP_DEBUG: "false"
      SELF_HOSTED: "true"

      # Deine Schlüssel (so lassen):
      COOLIFY_SECRET_KEY: 401a49063b516a93ac62a5dfdae969dd9189cae019dd0b1d7d9d7e8fd5db9269
      APP_KEY: base64:FLESjZzM6M2rd7T023CHSMGNQKegQBRUaZJY7wq4VCI=

      # DB (Laravel liest diese; URL-Variante nicht nötig)
      DB_CONNECTION: pgsql
      DB_HOST: db
      DB_PORT: "5432"
      DB_DATABASE: coolify
      DB_USERNAME: coolify
      DB_PASSWORD: coolifypass123

      # Queue/Redis
      QUEUE_CONNECTION: redis
      REDIS_HOST: redis
      REDIS_PORT: "6379"
      # Einige Coolify-Teile nutzen die URL – daher zusätzlich:
      COOLIFY_REDIS_URL: redis://redis:6379

      # Damit Coolify den DinD-Socket nutzt:
      DOCKER_HOST: unix:///data/docker.sock

      # SSL wird durch Umbrel-Proxy erledigt
      SSL_MODE: off
    extra_hosts:
      - host.docker.internal:host-gateway
      - ${APP_DOMAIN}:host-gateway
    volumes:
      # Gemeinsamer /data Mount mit DinD (enthält docker.sock unter /data)
      - ${APP_DATA_DIR}/data:/data
      # Persistenz für DB/Apps/Backups etc. (optional schlank; alles in einem Ort)
      - ${APP_DATA_DIR}/coolify:/var/www/html/storage/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://127.0.0.1:80/api/health >/dev/null 2>&1 || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 12
      start_period: 20s

  db:
    image: postgres:15
    restart: on-failure
    environment:
      POSTGRES_USER: coolify
      POSTGRES_PASSWORD: coolifypass123
      POSTGRES_DB: coolify
    volumes:
      - ${APP_DATA_DIR}/db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB -h 127.0.0.1"]
      interval: 10s
      timeout: 5s
      retries: 12
      start_period: 10s

  redis:
    image: redis:alpine
    restart: on-failure
    command: ["redis-server", "--save", "60", "1", "--loglevel", "warning"]
    volumes:
      - ${APP_DATA_DIR}/redis:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 12
      start_period: 5s
