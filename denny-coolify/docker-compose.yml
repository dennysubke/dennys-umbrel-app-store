version: "3.7"

services:
  app_proxy:
    environment:
      APP_HOST: denny-coolify_web_1
      APP_PORT: "80"

  docker:
    image: docker:28.0.4-dind
    privileged: true
    network_mode: host
    stop_grace_period: 1m
    restart: on-failure
    environment:
      DOCKER_ENSURE_BRIDGE: "dind0:10.32.0.1/16"
    entrypoint: /entrypoint.sh
    command: >
      dockerd
        --bridge dind0
        --data-root /data/data
        --exec-root /data/exec
        --host unix:///data/docker.sock
        --pidfile /data/docker.pid
    volumes:
      - ${APP_DATA_DIR}/entrypoint.sh:/entrypoint.sh
      - ${APP_DATA_DIR}/data/docker:/data

  web:
    image: ghcr.io/coollabsio/coolify:latest
    restart: on-failure
    stop_grace_period: 1m
    environment:
      APP_ENV: production
      APP_DEBUG: "false"
      SELF_HOSTED: "true"
      SSL_MODE: off
      DOCKER_HOST: unix:///data/docker.sock
      DB_CONNECTION: pgsql
      DB_HOST: db
      DB_PORT: "5432"
      DB_DATABASE: coolify
      DB_USERNAME: coolify
      DB_PASSWORD: coolifypass123
      QUEUE_CONNECTION: redis
      REDIS_HOST: redis
      REDIS_PORT: "6379"
    working_dir: /var/www/html
    entrypoint: ["/bin/sh","-lc","mkdir -p storage/app/ssh/keys storage/app/applications storage/app/databases storage/app/services storage/app/backups storage/app/webhooks-during-maintenance && chown -R www-data:www-data storage || true && php artisan migrate --force || true && exec /init"]
    volumes:
      - ${APP_DATA_DIR}/storage:/var/www/html/storage
      - ${APP_DATA_DIR}/data/docker:/data
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://127.0.0.1:80/api/health >/dev/null 2>&1 || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 12
      start_period: 30s

  db:
    image: postgres:15
    restart: on-failure
    environment:
      POSTGRES_USER: coolify
      POSTGRES_PASSWORD: coolifypass123
      POSTGRES_DB: coolify
    volumes:
      - ${APP_DATA_DIR}/db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB -h 127.0.0.1"]
      interval: 10s
      timeout: 5s
      retries: 12
      start_period: 10s

  redis:
    image: redis:alpine
    restart: on-failure
    command: ["redis-server", "--save", "60", "1", "--loglevel", "warning"]
    volumes:
      - ${APP_DATA_DIR}/redis:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 12
      start_period: 5s
